{
	"info": {
		"_postman_id": "f9d40051-8752-436d-b851-0a9bb37a4553",
		"name": "Keycloak-Granular-permissions-data-setup",
		"description": "Import the postman collection from the github from below location.\n\nOnce you import into postman --> Double click on collection(folder) --> Update variables --> Make sure that you are referring to the correct environment where you want to create the group data --> click on Run to run the collection --> check the progress on postman console --> Once the script is completed validate the data on keycloak.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "user info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"in getInfo request\", pm.collectionVariables.get(\"bearerToken\"));",
							"",
							"//pm.collectionVariables.get(\"bearerToken\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var userInfo = pm.response.json();",
							"pm.globals.set(\"userInfo\", userInfo);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{keycloak_url_prefix}}/realms/master/protocol/openid-connect/userinfo",
					"host": [
						"{{keycloak_url_prefix}}"
					],
					"path": [
						"realms",
						"master",
						"protocol",
						"openid-connect",
						"userinfo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Parent Group",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{parentGroupName}}\",\n    \"attributes\": {\n        \"org_id\": [\"{{orgAttributeID}}\"],\n        \"org_name\": [\"{{orgAttributeName}}\"]\n    }\n}"
				},
				"url": {
					"raw": "{{keycloak_url_prefix}}/admin/realms/{{realm}}/groups",
					"host": [
						"{{keycloak_url_prefix}}"
					],
					"path": [
						"admin",
						"realms",
						"{{realm}}",
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Parent Group Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var parentGroupInfo = pm.response.json();",
							"",
							"console.log(\"parent group info\",parentGroupInfo[0]);",
							"pm.globals.set(\"parentGroupInfo\", parentGroupInfo[0]);",
							"pm.globals.set(\"parentGroupInfoID\", parentGroupInfo[0].id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{keycloak_url_prefix}}/admin/realms/{{realm}}/groups?search={{parentGroupName}}",
					"host": [
						"{{keycloak_url_prefix}}"
					],
					"path": [
						"admin",
						"realms",
						"{{realm}}",
						"groups"
					],
					"query": [
						{
							"key": "search",
							"value": "{{parentGroupName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Child Group - admins",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var adminsChildGroupInfo = pm.response.json();",
							"pm.globals.set(\"adminsChildGroupPath\", adminsChildGroupInfo.path);",
							"pm.globals.set(\"adminsChildGroupID\", adminsChildGroupInfo.id);",
							"pm.globals.set(\"adminsChildGroup\", adminsChildGroupInfo);",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"admins\",\n    \"attributes\": {\n        \"org_admin\": [\"true\"]\n    }\n}"
				},
				"url": {
					"raw": "{{keycloak_url_prefix}}/admin/realms/{{realm}}/groups/{{parentGroupInfoID}}/children",
					"host": [
						"{{keycloak_url_prefix}}"
					],
					"path": [
						"admin",
						"realms",
						"{{realm}}",
						"groups",
						"{{parentGroupInfoID}}",
						"children"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Child Group - users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var usersChildGroupInfo = pm.response.json();",
							"pm.globals.set(\"usersChildGroupPath\", usersChildGroupInfo.path);",
							"",
							"pm.globals.set(\"usersChildGroupID\", usersChildGroupInfo.id);",
							"pm.globals.set(\"usersChildGroup\", usersChildGroupInfo);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"users\",\n    \"attributes\": {\n        \"org_admin\": [\"false\"]\n    }\n}"
				},
				"url": {
					"raw": "{{keycloak_url_prefix}}/admin/realms/{{realm}}/groups/{{parentGroupInfoID}}/children",
					"host": [
						"{{keycloak_url_prefix}}"
					],
					"path": [
						"admin",
						"realms",
						"{{realm}}",
						"groups",
						"{{parentGroupInfoID}}",
						"children"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a user and assign to admin group",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"username\": \"{{parentGroupName}}admin1\",\n        \"enabled\": true,\n        \"totp\": false,\n        \"emailVerified\": false,\n        \"firstName\": \"{{parentGroupName}}admin1 fn\",\n        \"lastName\": \"{{parentGroupName}}admin1 ln\",\n        \"groups\":[\"{{adminsChildGroupPath}}\"],\n        \"credentials\":[{\"type\":\"password\",\"value\":\"password\",\"temporary\":false}]\n}"
				},
				"url": {
					"raw": "{{keycloak_url_prefix}}/admin/realms/{{realm}}/users",
					"host": [
						"{{keycloak_url_prefix}}"
					],
					"path": [
						"admin",
						"realms",
						"{{realm}}",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a role for group admin",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"{{parentGroupName}}-group-admin-role\",\"description\":\"Whoever owns this role will be the admins to the group - {{parentGroupName}}.\"}"
				},
				"url": {
					"raw": "{{keycloak_url_prefix}}/admin/realms/{{realm}}/roles",
					"host": [
						"{{keycloak_url_prefix}}"
					],
					"path": [
						"admin",
						"realms",
						"{{realm}}",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Enable granular permissions - Parent Group",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var parentGranPermissionsInfo = pm.response.json();",
							"pm.globals.set(\"parentGranPermissionsInfo\", parentGranPermissionsInfo);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"enabled\": \"true\"}"
				},
				"url": {
					"raw": "{{keycloak_url_prefix}}/admin/realms/{{realm}}/groups/{{parentGroupInfoID}}/management/permissions",
					"host": [
						"{{keycloak_url_prefix}}"
					],
					"path": [
						"admin",
						"realms",
						"{{realm}}",
						"groups",
						"{{parentGroupInfoID}}",
						"management",
						"permissions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Enable granular permissions - Child Group - Admins",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var adminGranPermissionsInfo = pm.response.json();",
							"pm.globals.set(\"adminGranPermissionsInfo\", adminGranPermissionsInfo);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"enabled\": \"true\"}"
				},
				"url": {
					"raw": "{{keycloak_url_prefix}}/admin/realms/{{realm}}/groups/{{adminsChildGroupID}}/management/permissions",
					"host": [
						"{{keycloak_url_prefix}}"
					],
					"path": [
						"admin",
						"realms",
						"{{realm}}",
						"groups",
						"{{adminsChildGroupID}}",
						"management",
						"permissions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Enable granular permissions - Child Group - Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var usersGranPermissionsInfo = pm.response.json();",
							"pm.globals.set(\"usersGranPermissionsInfo\", usersGranPermissionsInfo);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"enabled\": \"true\"}"
				},
				"url": {
					"raw": "{{keycloak_url_prefix}}/admin/realms/{{realm}}/groups/{{usersChildGroupID}}/management/permissions",
					"host": [
						"{{keycloak_url_prefix}}"
					],
					"path": [
						"admin",
						"realms",
						"{{realm}}",
						"groups",
						"{{usersChildGroupID}}",
						"management",
						"permissions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Client Info - realm-management",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var realmMgmtClientInfo = pm.response.json();",
							"pm.globals.set(\"realmMgmtClientID\", realmMgmtClientInfo[0].id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{keycloak_url_prefix}}/admin/realms/{{realm}}/clients?clientId=realm-management",
					"host": [
						"{{keycloak_url_prefix}}"
					],
					"path": [
						"admin",
						"realms",
						"{{realm}}",
						"clients"
					],
					"query": [
						{
							"key": "clientId",
							"value": "realm-management"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Group Admin Role Search - Metadata",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var groupAdminRoleInfo = pm.response.json();",
							"pm.globals.set(\"groupAdminRoleID\", groupAdminRoleInfo[0].id);",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{keycloak_url_prefix}}/admin/realms/{{realm}}/roles?search={{parentGroupName}}-group-admin-role",
					"host": [
						"{{keycloak_url_prefix}}"
					],
					"path": [
						"admin",
						"realms",
						"{{realm}}",
						"roles"
					],
					"query": [
						{
							"key": "search",
							"value": "{{parentGroupName}}-group-admin-role"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get client role info - query-users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var queryUsersInfo = pm.response.json();",
							"pm.globals.set(\"queryUsersRoleId\", queryUsersInfo[0].id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{keycloak_url_prefix}}/admin/realms/{{realm}}/clients/{{realmMgmtClientID}}/roles?search=query-users",
					"host": [
						"{{keycloak_url_prefix}}"
					],
					"path": [
						"admin",
						"realms",
						"{{realm}}",
						"clients",
						"{{realmMgmtClientID}}",
						"roles"
					],
					"query": [
						{
							"key": "search",
							"value": "query-users"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get client role info - query-groups",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var queryGroupsInfo = pm.response.json();",
							"pm.globals.set(\"queryGroupsRoleId\", queryGroupsInfo[0].id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{keycloak_url_prefix}}/admin/realms/{{realm}}/clients/{{realmMgmtClientID}}/roles?search=query-groups",
					"host": [
						"{{keycloak_url_prefix}}"
					],
					"path": [
						"admin",
						"realms",
						"{{realm}}",
						"clients",
						"{{realmMgmtClientID}}",
						"roles"
					],
					"query": [
						{
							"key": "search",
							"value": "query-groups"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add group admin realm role to the admins group",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[{\n    \"id\": \"{{groupAdminRoleID}}\",\n    \"name\":\"{{parentGroupName}}-group-admin-role\"\n}]\n"
				},
				"url": {
					"raw": "{{keycloak_url_prefix}}/admin/realms/{{realm}}/groups/{{adminsChildGroupID}}/role-mappings/realm",
					"host": [
						"{{keycloak_url_prefix}}"
					],
					"path": [
						"admin",
						"realms",
						"{{realm}}",
						"groups",
						"{{adminsChildGroupID}}",
						"role-mappings",
						"realm"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add required client roles to the admins Group",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[{\n    \"id\": \"{{queryUsersRoleId}}\",\n    \"name\": \"query-users\",\n    \"description\": \"${role_query-users}\"\n},\n{\n    \"id\": \"{{queryGroupsRoleId}}\",\n    \"name\": \"query-groups\",\n    \"description\": \"${role_query-groups}\"\n}]\n"
				},
				"url": {
					"raw": "{{keycloak_url_prefix}}/admin/realms/{{realm}}/groups/{{adminsChildGroupID}}/role-mappings/clients/{{realmMgmtClientID}}",
					"host": [
						"{{keycloak_url_prefix}}"
					],
					"path": [
						"admin",
						"realms",
						"{{realm}}",
						"groups",
						"{{adminsChildGroupID}}",
						"role-mappings",
						"clients",
						"{{realmMgmtClientID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "***Create a role based policy under realm management client - Update permissions with policy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Policy is created succcessfully. Now going to update the each permission with the policy we created now.\")",
							"var groupAdminPolicyInfo = pm.response.json();",
							"pm.globals.set(\"groupAdminPolicyInfo\", groupAdminPolicyInfo);",
							"",
							"console.log(\"parentGranPermissionsInfo\",pm.globals.get(\"parentGranPermissionsInfo\"))",
							"console.log(\"adminGranPermissionsInfo\",pm.globals.get(\"adminGranPermissionsInfo\") )",
							"console.log(\"usersGranPermissionsInfo\",pm.globals.get(\"usersGranPermissionsInfo\") )",
							"",
							"",
							"var allPermissionsIds = [];",
							"",
							"for (const [key, value] of Object.entries(pm.globals.get(\"parentGranPermissionsInfo\").scopePermissions)) {",
							"  allPermissionsIds.push(value);",
							"}",
							"",
							"for (const [key, value] of Object.entries(pm.globals.get(\"adminGranPermissionsInfo\").scopePermissions)) {",
							"  allPermissionsIds.push(value);",
							"}",
							"",
							"for (const [key, value] of Object.entries(pm.globals.get(\"usersGranPermissionsInfo\").scopePermissions)) {",
							"  allPermissionsIds.push(value);",
							"}",
							"",
							"console.log(\"All permissions IDS needs to be updated\", allPermissionsIds);",
							"",
							"function sendRequest(req) {",
							"    return new Promise((resolve, reject) => {",
							"        pm.sendRequest(req, (err, res) => {",
							"            if (err) {",
							"                return reject(err);",
							"            }",
							"",
							"            return resolve(res);",
							"        })",
							"    });",
							"}",
							"",
							"const _dummy = setInterval(() => {}, 900000);",
							"",
							"(async function main() {",
							"    ",
							"console.log(\"in async main to update each policy in sequential way\")",
							"for (let i = 0; i < allPermissionsIds.length; i++) {",
							"",
							"    const permissionGetRequest = {",
							"        url: `${pm.collectionVariables.get(\"keycloak_url_prefix\")}/admin/realms/${pm.collectionVariables.get(\"realm\")}/clients/${pm.globals.get(\"realmMgmtClientID\")}/authz/resource-server/permission/scope/`+allPermissionsIds[i],",
							"        method: 'GET',",
							"        header: { 'content-type': 'application/json', 'Authorization': `Bearer ${pm.globals.get(\"bearerToken\")}` }       ",
							"    };",
							"    const permissionResult = await sendRequest(permissionGetRequest);",
							"",
							"    const scopesGetRequest = {",
							"        url: `${pm.collectionVariables.get(\"keycloak_url_prefix\")}/admin/realms/${pm.collectionVariables.get(\"realm\")}/clients/${pm.globals.get(\"realmMgmtClientID\")}/authz/resource-server/policy/`+allPermissionsIds[i]+'/scopes',",
							"        method: 'GET',",
							"        header: { 'content-type': 'application/json' , 'Authorization': `Bearer ${pm.globals.get(\"bearerToken\")}`  }       ",
							"    };",
							"    const scopesResult = await sendRequest(scopesGetRequest);",
							"",
							"    const resourcesGetRequest = {",
							"        url: `${pm.collectionVariables.get(\"keycloak_url_prefix\")}/admin/realms/${pm.collectionVariables.get(\"realm\")}/clients/${pm.globals.get(\"realmMgmtClientID\")}/authz/resource-server/policy/`+allPermissionsIds[i]+'/resources',",
							"        method: 'GET',",
							"        header: { 'content-type': 'application/json' , 'Authorization': `Bearer ${pm.globals.get(\"bearerToken\")}`  }       ",
							"    };",
							"    const resourcesResult = await sendRequest(resourcesGetRequest);",
							"",
							"    var permissionBody = permissionResult.json();",
							"    permissionBody.resources = [resourcesResult.json()[0]._id];",
							"    permissionBody.scopes = [scopesResult.json()[0].id];",
							"    permissionBody.policies = [groupAdminPolicyInfo.id];",
							"    ",
							"       console.log(\"update permission request - \", allPermissionsIds[i], permissionBody)",
							"",
							"",
							"    const permissionUpdateRequest = {",
							"        url: `${pm.collectionVariables.get(\"keycloak_url_prefix\")}/admin/realms/${pm.collectionVariables.get(\"realm\")}/clients/${pm.globals.get(\"realmMgmtClientID\")}/authz/resource-server/permission/scope/`+allPermissionsIds[i],",
							"        method: 'PUT',",
							"        header: { 'content-type': 'application/json' , 'Authorization': `Bearer ${pm.globals.get(\"bearerToken\")}`  },",
							"        body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(permissionBody)",
							"    }",
							"    };",
							"        const result = await sendRequest(permissionUpdateRequest);",
							"    ",
							"}",
							"",
							"    clearInterval(_dummy)",
							"",
							"console.log(\"All the permissions have been updated with the policy.\")",
							"",
							"console.log(\"**** SCRIPT execution is completed. Check keycloak instance. ****\")",
							"})();",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"roles\":[{\"id\":\"{{groupAdminRoleID}}\",\"required\":true}],\"logic\":\"POSITIVE\",\"name\":\"{{parentGroupName}}-group-admin-role-policy\",\"description\":\"This role based policy will link the users to the admins of {{parentGroupName}}\"}"
				},
				"url": {
					"raw": "{{keycloak_url_prefix}}/admin/realms/{{realm}}/clients/{{realmMgmtClientID}}/authz/resource-server/policy/role",
					"host": [
						"{{keycloak_url_prefix}}"
					],
					"path": [
						"admin",
						"realms",
						"{{realm}}",
						"clients",
						"{{realmMgmtClientID}}",
						"authz",
						"resource-server",
						"policy",
						"role"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					" console.log(\"Getting Token\");",
					"",
					"",
					"const _dummy = setInterval(() => {}, 300000);",
					"",
					"function sendRequest(req) {",
					"    return new Promise((resolve, reject) => {",
					"        pm.sendRequest(req, (err, res) => {",
					"            if (err) {",
					"                return reject(err);",
					"            }",
					"",
					"            return resolve(res);",
					"        })",
					"    });",
					"}",
					"",
					"(async function main() {",
					"",
					"const tokenPostRequest = {",
					"    url: `${pm.collectionVariables.get(\"keycloak_url_prefix\")}/realms/${pm.collectionVariables.get(\"tokenRealm\")}/protocol/openid-connect/token`,",
					"    method: 'POST',",
					"    header: { 'content-type': 'application/x-www-form-urlencoded' },",
					"    body: {",
					"    mode: 'urlencoded',",
					"    urlencoded : [",
					"      { key: 'client_id', value: 'admin-cli'},",
					"      { key: 'grant_type', value: 'password'},",
					"      { key: 'username', value: `${pm.collectionVariables.get(\"username\")}`},",
					"      { key: 'password', value: `${pm.collectionVariables.get(\"password\")}`},",
					"      { key: 'scope', value: 'openid'}",
					"    ]",
					"  }",
					"};",
					"    const result = await sendRequest(tokenPostRequest);",
					"",
					"    pm.globals.set(\"bearerToken\", result.json().access_token);",
					"    pm.collectionVariables.set(\"bearerToken\", result.json().access_token);",
					"",
					"    clearInterval(_dummy)",
					"})();",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "keycloak_url_prefix",
			"value": "http://localhost:8080"
		},
		{
			"key": "tokenRealm",
			"value": "master",
			"type": "string"
		},
		{
			"key": "username",
			"value": "admin"
		},
		{
			"key": "password",
			"value": "admin"
		},
		{
			"key": "parentGroupName",
			"value": "customer1"
		},
		{
			"key": "realm",
			"value": "data_setup_automation"
		},
		{
			"key": "orgAttributeName",
			"value": "IDP Customer"
		},
		{
			"key": "orgAttributeID",
			"value": "1234"
		}
	]
}
